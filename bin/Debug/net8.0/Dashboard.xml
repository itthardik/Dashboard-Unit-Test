<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dashboard</name>
    </assembly>
    <members>
        <member name="T:Dashboard.Controllers.AlertController">
            <summary>
            Alert Controller
            </summary>
            <param name="alertService"></param>
        </member>
        <member name="M:Dashboard.Controllers.AlertController.#ctor(Dashboard.Services.Interfaces.IAlertService)">
            <summary>
            Alert Controller
            </summary>
            <param name="alertService"></param>
        </member>
        <member name="M:Dashboard.Controllers.AlertController.GetAlertsByPagination(System.Int32,System.Int32)">
            <summary>
            Get alerts by pages
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Controllers.AuthController">
            <summary>
            Auth controller
            </summary>
        </member>
        <member name="M:Dashboard.Controllers.AuthController.#ctor(Dashboard.Services.Interfaces.IAuthService,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Auth controller
            </summary>
        </member>
        <member name="M:Dashboard.Controllers.AuthController.Login(System.String,System.String)">
            <summary>
            Login route
            </summary>
            <param name="Username"></param>
            <param name="Password"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.AuthController.SignUp(RealTimeComTest.Models.ViewModels.Request.RequestUser,System.String)">
            <summary>
            Sign up
            </summary>
            <param name="requestUser"></param>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.AuthController.Logout">
            <summary>
            Log Out Route
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.AuthController.RefreshToken">
            <summary>
            Refresh token for auth
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Controllers.CustomerSupportController">
            <summary>
            Customer Support
            </summary>
        </member>
        <member name="M:Dashboard.Controllers.CustomerSupportController.#ctor(Dashboard.Services.Interfaces.IFreshdeskService)">
            <summary>
            Customer Support
            </summary>
        </member>
        <member name="M:Dashboard.Controllers.CustomerSupportController.GetAllTicketWithPagination(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Get All Tickets by Pagination
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.CustomerSupportController.GetTicketsByQuery(System.String)">
            <summary>
            Get Tickets by query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.CustomerSupportController.GetTicketsByID(System.Int32)">
            <summary>
            Get ticket by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.CustomerSupportController.GetOverallStats">
            <summary>
            Get Overall stats of Customer support
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.CustomerSupportController.AddMultipleTickets">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Controllers.InventoryController">
            <summary>
            Inventory Controller
            </summary>
            <param name="inventoryService"></param>
        </member>
        <member name="M:Dashboard.Controllers.InventoryController.#ctor(Dashboard.Services.Interfaces.IInventoryService)">
            <summary>
            Inventory Controller
            </summary>
            <param name="inventoryService"></param>
        </member>
        <member name="M:Dashboard.Controllers.InventoryController.GetProductByPagination(System.Int32,System.Int32,System.String)">
            <summary>
            Get Product / Inventory By Pagination and FilterKey
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterKey"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.InventoryController.AddInventoryWithProductId(System.Int32,System.Int32)">
            <summary>
            Add Inventory With Product Id
            </summary>
            <param name="productId"></param>
            <param name="stockRequire"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Controllers.MqttController">
            <summary>
            Mqtt Controller
            </summary>
            <param name="mqttService"></param>
        </member>
        <member name="M:Dashboard.Controllers.MqttController.#ctor(Dashboard.Services.MqttService)">
            <summary>
            Mqtt Controller
            </summary>
            <param name="mqttService"></param>
        </member>
        <member name="M:Dashboard.Controllers.MqttController.Publish(System.String,System.String)">
            <summary>
            Publish New Message
            </summary>
            <param name="topic"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.MqttController.Subscribe(System.String)">
            <summary>
            Sub topic
            </summary>
            <param name="topic"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Controllers.OrderController">
            <summary>
            Order Controller
            </summary>
            <param name="orderService"></param>
        </member>
        <member name="M:Dashboard.Controllers.OrderController.#ctor(Dashboard.Services.Interfaces.IOrderService)">
            <summary>
            Order Controller
            </summary>
            <param name="orderService"></param>
        </member>
        <member name="M:Dashboard.Controllers.OrderController.PlaceOrder(System.Collections.Generic.List{Dashboard.Models.DTOs.Request.RequestOrderItem})">
            <summary>
            Place New Order
            </summary>
            <param name="products"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.OrderController.LiveOrders">
            <summary>
            Start Live Orders Job
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Controllers.RevenueController">
            <summary>
            Revenue Controller
            </summary>
        </member>
        <member name="M:Dashboard.Controllers.RevenueController.#ctor(Dashboard.Services.Interfaces.IRevenueService)">
            <summary>
            Revenue Controller
            </summary>
        </member>
        <member name="M:Dashboard.Controllers.RevenueController.GetProductCostWithIdOrName(System.Nullable{System.Int32},System.String)">
            <summary>
            Get product from id or name
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="M:Dashboard.Controllers.RevenueController.GetAllSearchValuesByPagination(System.Int32,System.Int32)">
            <summary>
            Get All Search Values By Pagination
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.RevenueController.GetRevenueStatsBasedOnDays(System.String)">
            <summary>
            Get Revenue Stats Based On Days
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Controllers.SalesController">
            <summary>
            Sales Controller
            </summary>
            <param name="salesService"></param>
        </member>
        <member name="M:Dashboard.Controllers.SalesController.#ctor(Dashboard.Services.Interfaces.ISalesService)">
            <summary>
            Sales Controller
            </summary>
            <param name="salesService"></param>
        </member>
        <member name="M:Dashboard.Controllers.SalesController.GetSalesStatsByCategoryBasedOnDays(System.String)">
            <summary>
            Get Sales by Category
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.SalesController.GetOverallSalesStatsBasedOnDays(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Overall Sales
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.SalesController.GetTopSellingProductsByPagination(System.Int32,System.Int32)">
            <summary>
            Get Top Selling Products
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.SalesController.GetTopSellingCategoriesByPagination(System.Int32,System.Int32)">
            <summary>
            Get Top Selling Categories
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.SalesController.GetRealtimeDateOfLast10Min">
            <summary>
            Get ReatimData of last 10 min
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dashboard.DataContext.ApiContext.RevenueSPResponses">
            <summary>
            Revenue SP response
            </summary>
        </member>
        <member name="P:Dashboard.DataContext.ApiContext.SalesByCategorySPResponses">
            <summary>
            Sales By Category SP Responses
            </summary>
        </member>
        <member name="P:Dashboard.DataContext.ApiContext.TotalSalesSPResponses">
            <summary>
            Total Sales SP Responses
            </summary>
        </member>
        <member name="P:Dashboard.DataContext.ApiContext.TopSellingProductsSPResponses">
            <summary>
            Top Selling Products SP Responses
            </summary>
        </member>
        <member name="T:Dashboard.Models.DTOs.Request.RequestOrderItem">
            <summary>
            Request Order Item
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Request.RequestOrderItem.ProductId">
            <summary>
            product Id
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Request.RequestOrderItem.Quantity">
            <summary>
            quantity
            </summary>
        </member>
        <member name="T:Dashboard.Models.DTOs.Response.PaginatedResponse`1">
            <summary>
            Paginated Response Model
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.PaginatedResponse`1.MaxPages">
            <summary>
            Max Pages
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.PaginatedResponse`1.Data">
            <summary>
            Generic Data List
            </summary>
        </member>
        <member name="T:Dashboard.Models.DTOs.Response.RevenueSPResponse">
            <summary>
            Response type of revenue
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.RevenueSPResponse.CategoryName">
            <summary>
            Category Name
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.RevenueSPResponse.Revenue">
            <summary>
            Total Revenue
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.RevenueSPResponse.Profit">
            <summary>
            Net Profit
            </summary>
        </member>
        <member name="T:Dashboard.Models.DTOs.Response.SalesByCategorySPResponse">
            <summary>
            Sales by category sp response
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.SalesByCategorySPResponse.CategoryId">
            <summary>
            Category id
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.SalesByCategorySPResponse.Category">
            <summary>
            Category Name
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.SalesByCategorySPResponse.TotalSales">
            <summary>
            Total Sales
            </summary>
        </member>
        <member name="T:Dashboard.Models.DTOs.Response.TopSellingProductsSPResponse">
            <summary>
            Top Selling Products SP Response
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.TopSellingProductsSPResponse.Id">
            <summary>
            id
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.TopSellingProductsSPResponse.Name">
            <summary>
            name
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.TopSellingProductsSPResponse.TotalSales">
            <summary>
            total sales
            </summary>
        </member>
        <member name="T:Dashboard.Models.DTOs.Response.TotalSalesSPResponse">
            <summary>
            Total Sales SP Res
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.TotalSalesSPResponse.TotalQuantity">
            <summary>
            total quantity
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.TotalSalesSPResponse.CurrentDateTime">
            <summary>
            current timestamp
            </summary>
        </member>
        <member name="T:Dashboard.Program">
            <summary>
            Program.cs
            </summary>
        </member>
        <member name="M:Dashboard.Program.Main(System.String[])">
            <summary>
            Main Endpoint
            </summary>
        </member>
        <member name="T:Dashboard.Repository.AlertRepository">
            <summary>
            Alert Repo
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Dashboard.Repository.AlertRepository.#ctor(Dashboard.DataContext.ApiContext)">
            <summary>
            Alert Repo
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Dashboard.Repository.AlertRepository.GetAllAlerts">
            <summary>
            Get All Alerts
            </summary>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="M:Dashboard.Repository.AlertRepository.GetAlertByProductId(System.Int32)">
            <summary>
            Get alert by id
            </summary>
            <param name="productId"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.AlertRepository.AddAlert(Dashboard.Models.Alert)">
            <summary>
            Add Alerts
            </summary>
            <param name="alert"></param>
        </member>
        <member name="M:Dashboard.Repository.AlertRepository.Save">
            <summary>
            Saves all changes made to the repository.
            </summary>
        </member>
        <member name="T:Dashboard.Repository.Interfaces.IAlertRepository">
            <summary>
            Interface for Alert Respository
            </summary>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IAlertRepository.GetAllAlerts">
            <summary>
            Get All Repos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IAlertRepository.GetAlertByProductId(System.Int32)">
            <summary>
            Get Alert By product Id
            </summary>
            <param name="productId"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IAlertRepository.AddAlert(Dashboard.Models.Alert)">
            <summary>
            Add Alert
            </summary>
            <param name="alert"></param>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IAlertRepository.Save">
            <summary>
            Saves all changes made to the repository.
            </summary>
        </member>
        <member name="T:Dashboard.Repository.Interfaces.IOrderRepository">
            <summary>
            Interface for Order Respository
            </summary>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IOrderRepository.AddEmptyOrder(System.Int32)">
            <summary>
            Add Empty Order
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IOrderRepository.AddOrderItem(Dashboard.Models.OrderItem)">
            <summary>
            Add Order Item
            </summary>
            <param name="orderItem"></param>
        </member>
        <member name="T:Dashboard.Repository.Interfaces.IProductRepository">
            <summary>
            Defines methods for managing products in the repository.
            </summary>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IProductRepository.GetProductById(System.Int32)">
            <summary>
            Retrieves a product by its ID.
            </summary>
            <param name="productId">The ID of the product to retrieve.</param>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IProductRepository.GetProductsThatContainsName(System.String)">
            <summary>
            Retrieves the first product that contains the specified name.
            </summary>
            <param name="name">The name to search for in product names.</param>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IProductRepository.GetSortedProductsByFilterKey(System.String)">
            <summary>
            Retrieves sorted products based on the specified filter key.
            </summary>
            <param name="filterKey">The key to filter and sort products.</param>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IProductRepository.GetProductIncludingSupplierById(System.Int32)">
            <summary>
            Retrieves a product including its supplier by the product ID.
            </summary>
            <param name="productId">The ID of the product to retrieve.</param>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IProductRepository.Save">
            <summary>
            Saves changes to the database.
            </summary>
        </member>
        <member name="T:Dashboard.Repository.Interfaces.IRevenueRepository">
            <summary>
            Revenue Repo Interface
            </summary>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IRevenueRepository.GetAllOrderedSearchValues">
            <summary>
            Get Top search value by page and page size
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IRevenueRepository.GetRevenueStatsBasedOnDays(System.Int32)">
            <summary>
            Get Revenue Stats Based On Days
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Repository.Interfaces.ISalesRepository">
            <summary>
            Interface for Sales Respository
            </summary>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.ISalesRepository.GetSalesStatsByCategoryBasedOnDays(System.Int32)">
            <summary>
            Get Sales Stats By Category Based On Days
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.ISalesRepository.GetOverallSalesStatsBasedOnDays(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Overall Sales Stats Based On Days
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.ISalesRepository.GetTopSellingProducts">
            <summary>
            Get Top Selling Products By Pagination
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.ISalesRepository.GetTopSellingCategories">
            <summary>
            Get Top Selling Categories By Pagination
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.ISalesRepository.GetLast10MinSales">
            <summary>
            Get Last 10min Sales
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Repository.Interfaces.IUserRepository">
            <summary>
            Interface for user repository operations.
            Provides methods for managing user data.
            </summary>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IUserRepository.GetUserByUserName(System.String)">
            <summary>
            Retrieves a user by their username.
            </summary>
            <param name="username">The username of the user to retrieve.</param>
            <returns>The user with the specified username.</returns>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IUserRepository.AddNewUser(Dashboard.Models.User)">
            <summary>
            Adds a new user to the repository.
            </summary>
            <param name="user">The user to add.</param>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IUserRepository.Save">
            <summary>
            Saves all changes made to the repository.
            </summary>
        </member>
        <member name="T:Dashboard.Repository.OrderRepository">
            <summary>
            Order Repo
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Dashboard.Repository.OrderRepository.#ctor(Dashboard.DataContext.ApiContext)">
            <summary>
            Order Repo
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Dashboard.Repository.OrderRepository.AddEmptyOrder(System.Int32)">
            <summary>
            Add Empty Order
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.OrderRepository.AddOrderItem(Dashboard.Models.OrderItem)">
            <summary>
            Add Order Item
            </summary>
            <param name="orderItem"></param>
        </member>
        <member name="T:Dashboard.Repository.ProductRepository">
            <summary>
            Repository class for managing products in the database.
            </summary>
        </member>
        <member name="M:Dashboard.Repository.ProductRepository.#ctor(Dashboard.DataContext.ApiContext)">
            <summary>
            Repository class for managing products in the database.
            </summary>
        </member>
        <member name="M:Dashboard.Repository.ProductRepository.GetProductById(System.Int32)">
            <summary>
            Retrieves a product by its ID.
            </summary>
            <param name="productId">The ID of the product to retrieve.</param>
            <returns>The product with the specified ID.</returns>
            <exception cref="T:Dashboard.Utility.CustomException">Thrown when no product with the specified ID is found.</exception>
        </member>
        <member name="M:Dashboard.Repository.ProductRepository.GetProductsThatContainsName(System.String)">
            <summary>
            Retrieves the first product that contains the specified name.
            </summary>
            <param name="name">The name to search for in product names.</param>
            <returns>The first product that contains the specified name.</returns>
            <exception cref="T:Dashboard.Utility.CustomException">Thrown when no product with the specified name is found.</exception>
        </member>
        <member name="M:Dashboard.Repository.ProductRepository.GetSortedProductsByFilterKey(System.String)">
            <summary>
            Retrieves sorted products based on the specified filter key.
            </summary>
            <param name="filterKey">The key to filter and sort products.</param>
            <returns>An <see cref="T:System.Linq.IQueryable`1"/> of sorted products.</returns>
            <exception cref="T:Dashboard.Utility.CustomException">Thrown when no products are found in the inventory.</exception>
        </member>
        <member name="M:Dashboard.Repository.ProductRepository.GetProductIncludingSupplierById(System.Int32)">
            <summary>
            Retrieves a product including its supplier by the product ID.
            </summary>
            <param name="productId">The ID of the product to retrieve.</param>
            <returns>The product including its supplier.</returns>
            <exception cref="T:Dashboard.Utility.CustomException">Thrown when no product with the specified ID is found.</exception>
        </member>
        <member name="M:Dashboard.Repository.ProductRepository.Save">
            <summary>
            Saves changes to the database.
            </summary>
        </member>
        <member name="T:Dashboard.Repository.RevenueRepository">
            <summary>
            Revenue Repo
            </summary>
            <param name="apiContext"></param>
        </member>
        <member name="M:Dashboard.Repository.RevenueRepository.#ctor(Dashboard.DataContext.ApiContext)">
            <summary>
            Revenue Repo
            </summary>
            <param name="apiContext"></param>
        </member>
        <member name="M:Dashboard.Repository.RevenueRepository.GetAllOrderedSearchValues">
            <summary>
            Get Top search value by page and page size
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.RevenueRepository.GetRevenueStatsBasedOnDays(System.Int32)">
            <summary>
            Get Top 10 Revenue And  Profit
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Repository.SalesRepository">
            <summary>
            Sales Repo
            </summary>
            <param name="apiContext"></param>
        </member>
        <member name="M:Dashboard.Repository.SalesRepository.#ctor(Dashboard.DataContext.ApiContext)">
            <summary>
            Sales Repo
            </summary>
            <param name="apiContext"></param>
        </member>
        <member name="M:Dashboard.Repository.SalesRepository.GetSalesStatsByCategoryBasedOnDays(System.Int32)">
            <summary>
            Get Sales Stats By Category Based On Days
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.SalesRepository.GetOverallSalesStatsBasedOnDays(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Overall Sales Stats Based On Days
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.SalesRepository.GetTopSellingProducts">
            <summary>
            Get Top Selling Products By Pagination
            </summary>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="M:Dashboard.Repository.SalesRepository.GetTopSellingCategories">
            <summary>
            Get Top Selling Categories By Pagination
            </summary>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="M:Dashboard.Repository.SalesRepository.GetLast10MinSales">
            <summary>
            Get Last 10min Sales Data
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Repository.UserRepository">
            <summary>
            Repository for managing user data.
            Provides methods for retrieving, adding, and saving users.
            </summary>
            <param name="context">The DbContext instance to use for database operations.</param>
        </member>
        <member name="M:Dashboard.Repository.UserRepository.#ctor(Dashboard.DataContext.ApiContext)">
            <summary>
            Repository for managing user data.
            Provides methods for retrieving, adding, and saving users.
            </summary>
            <param name="context">The DbContext instance to use for database operations.</param>
        </member>
        <member name="M:Dashboard.Repository.UserRepository.GetUserByUserName(System.String)">
            <summary>
            Retrieves a user by their username.
            </summary>
            <param name="username">The username of the user to retrieve.</param>
            <returns>The user with the specified username.</returns>
            <exception cref="T:Dashboard.Utility.CustomException">Thrown when no user with the specified username is found.</exception>
        </member>
        <member name="M:Dashboard.Repository.UserRepository.AddNewUser(Dashboard.Models.User)">
            <summary>
            Adds a new user to the repository.
            </summary>
            <param name="user">The user to add.</param>
            <exception cref="T:Dashboard.Utility.CustomException">Thrown when a user with the specified username already exists.</exception>
        </member>
        <member name="M:Dashboard.Repository.UserRepository.Save">
            <summary>
            Saves all changes made to the repository.
            </summary>
        </member>
        <member name="T:Dashboard.ServiceConfiguration.AuthServiceExtensions">
            <summary>
            Extension methods for configuring authentication and authorization services.
            </summary>
        </member>
        <member name="M:Dashboard.ServiceConfiguration.AuthServiceExtensions.AddCustomAuth(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures JWT authentication and role-based authorization policies.
            </summary>
            <param name="services">The service collection to which authentication and authorization will be added.</param>
            <param name="configuration">The configuration object used to retrieve JWT settings.</param>
            <returns>The updated service collection.</returns>
        </member>
        <member name="T:Dashboard.ServiceConfiguration.CorsServiceExtensions">
            <summary>
            Extension methods for configuring CORS services.
            </summary>
        </member>
        <member name="M:Dashboard.ServiceConfiguration.CorsServiceExtensions.AddCustomCors(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures CORS policies for the application.
            </summary>
            <param name="services">The service collection to which CORS will be added.</param>
            <returns>The updated service collection.</returns>
        </member>
        <member name="T:Dashboard.ServiceConfiguration.DbContextExtensions">
            <summary>
            Extension methods for configuring database contexts.
            </summary>
        </member>
        <member name="M:Dashboard.ServiceConfiguration.DbContextExtensions.AddDatabaseContexts(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures the application's database contexts.
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Dashboard.ServiceConfiguration.HangfireExtensions">
            <summary>
            Extension methods for configuring Hangfire services.
            </summary>
        </member>
        <member name="M:Dashboard.ServiceConfiguration.HangfireExtensions.AddHangfireServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures Hangfire with SQL Server storage and adds a Hangfire server.
            </summary>
            <param name="services">The service collection to which Hangfire will be added.</param>
            <param name="configuration">The configuration object used to retrieve the connection string.</param>
        </member>
        <member name="M:Dashboard.ServiceConfiguration.HangfireExtensions.UseCustomHangfireJobs(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configures recurring jobs for the application.
            </summary>
            <param name="app">The application builder to which the jobs will be added.</param>
        </member>
        <member name="T:Dashboard.ServiceConfiguration.HttpClientExtensions">
            <summary>
            Extension methods for configuring HTTP clients.
            </summary>
        </member>
        <member name="M:Dashboard.ServiceConfiguration.HttpClientExtensions.AddHttpClients(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
             <summary>
             Configures HTTP clients for the application.
             </summary>
            <param name="configuration"></param>
            <param name="services"></param>
        </member>
        <member name="T:Dashboard.ServiceConfiguration.RepositoryServiceExtensions">
            <summary>
            Repository Service Extensions Static Class
            </summary>
        </member>
        <member name="M:Dashboard.ServiceConfiguration.RepositoryServiceExtensions.AddRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add all repos to service collection
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.ServiceConfiguration.ServiceRegistrationExtensions">
            <summary>
            Extension methods for registering application services.
            </summary>
        </member>
        <member name="M:Dashboard.ServiceConfiguration.ServiceRegistrationExtensions.AddAppServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds application services to the service collection.
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Dashboard.ServiceConfiguration.SwaggerServiceExtensions">
            <summary>
            Extension methods for configuring Swagger services.
            </summary>
        </member>
        <member name="M:Dashboard.ServiceConfiguration.SwaggerServiceExtensions.AddCustomSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures Swagger services with XML comments for class and function-level documentation.
            </summary>
            <param name="services">The service collection to which Swagger will be added.</param>
            <returns>The updated service collection.</returns>
        </member>
        <member name="T:Dashboard.Services.AlertService">
            <summary>
            Alert service
            </summary>
            <param name="alertRepository"></param>
        </member>
        <member name="M:Dashboard.Services.AlertService.#ctor(Dashboard.Repository.Interfaces.IAlertRepository)">
            <summary>
            Alert service
            </summary>
            <param name="alertRepository"></param>
        </member>
        <member name="M:Dashboard.Services.AlertService.GetAllAlerts(System.Int32,System.Int32)">
            <summary>
            Get all alerts
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Services.AuthService">
            <summary>
            Auth Service Handler
            </summary>
            <param name="userRepository"></param>
            <param name="configuration"></param>
            <param name="brokerService"></param>
        </member>
        <member name="M:Dashboard.Services.AuthService.#ctor(Dashboard.Repository.Interfaces.IUserRepository,Microsoft.Extensions.Configuration.IConfiguration,Dashboard.Services.BrokerService)">
            <summary>
            Auth Service Handler
            </summary>
            <param name="userRepository"></param>
            <param name="configuration"></param>
            <param name="brokerService"></param>
        </member>
        <member name="M:Dashboard.Services.AuthService.Login(System.String,System.String)">
            <summary>
            Login Handler
            </summary>
            <param name="Username"></param>
            <param name="Password"></param>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="M:Dashboard.Services.AuthService.SignUp(RealTimeComTest.Models.ViewModels.Request.RequestUser,System.String)">
            <summary>
            SignUp Handler
            </summary>
            <param name="requestUser"></param>
            <param name="role"></param>
        </member>
        <member name="M:Dashboard.Services.AuthService.LogOut(System.String)">
            <summary>
            Logout Handler
            </summary>
            <param name="token"></param>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="M:Dashboard.Services.AuthService.RefreshToken(System.String)">
            <summary>
            Refresh Handler
            </summary>
            <param name="token"></param>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="T:Dashboard.Services.BackgroundJobService">
            <summary>
            Bg Service
            </summary>
            <param name="context"></param>
            <param name="mqttService"></param>
            <param name="orderService"></param>
        </member>
        <member name="M:Dashboard.Services.BackgroundJobService.#ctor(Dashboard.DataContext.ApiContext,Dashboard.Services.MqttService,Dashboard.Services.Interfaces.IOrderService)">
            <summary>
            Bg Service
            </summary>
            <param name="context"></param>
            <param name="mqttService"></param>
            <param name="orderService"></param>
        </member>
        <member name="M:Dashboard.Services.BackgroundJobService.RestockBasedOnNotification">
            <summary>
            Restock Notification at Midnight
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.BackgroundJobService.UpdateAverageDailyUsageAndReorderPointForAllProducts">
            <summary>
            Update Avg Daily Usage and Reorder Point for all products
            </summary>
        </member>
        <member name="M:Dashboard.Services.BackgroundJobService.ProcessExcelAndPlaceOrders(System.String)">
            <summary>
            Get Excel Data and send req of orders
            </summary>
            <param name="excelFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.BackgroundJobService.GetTotalOrderInLast60Sec">
            <summary>
            Get Total Orders in Last 1 min
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Services.BrokerService">
            <summary>
            Broker Service
            </summary>
        </member>
        <member name="M:Dashboard.Services.BrokerService.AddUser(System.String,System.String,System.String)">
            <summary>
            Add User to broker
            </summary>
            <param name="Username"></param>
            <param name="Password"></param>
            <param name="Role"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Dashboard.Services.BrokerService.LoginUser(System.String,System.String,System.String)">
            <summary>
            Login user to broker
            </summary>
            <param name="Username"></param>
            <param name="Password"></param>
            <param name="Role"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Dashboard.Services.BrokerService.LogoutUser(System.String)">
            <summary>
            Logout User to broker
            </summary>
            <param name="Username"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Dashboard.Services.BrokerService.RefreshUser(System.String,System.String)">
            <summary>
            Refresh User in broker
            </summary>
            <param name="Username"></param>
            <param name="Password"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Dashboard.Services.BrokerService.RunMosquittoCtrlCommand(System.String)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Services.CommandResult">
            <summary>
            DYNSEC Command results
            </summary>
        </member>
        <member name="P:Dashboard.Services.CommandResult.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="P:Dashboard.Services.CommandResult.Output">
            <summary>
            Output
            </summary>
        </member>
        <member name="P:Dashboard.Services.CommandResult.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:Dashboard.Services.FreshdeskService">
            <summary>
            Freshdesk Repo
            </summary>
            <param name="httpClient"></param>
        </member>
        <member name="M:Dashboard.Services.FreshdeskService.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Freshdesk Repo
            </summary>
            <param name="httpClient"></param>
        </member>
        <member name="M:Dashboard.Services.FreshdeskService.GetAllTickets(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Get all tickets
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="orderBy"></param>
            <param name="orderType"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.FreshdeskService.GetTicketsByQuery(System.String)">
            <summary>
            Get Tickets By Query
            </summary>
            <param name="query"></param>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="M:Dashboard.Services.FreshdeskService.GetTicketById(System.Int32)">
            <summary>
            Get ticket by id
            </summary>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="M:Dashboard.Services.FreshdeskService.GetOverallStats">
            <summary>
            Get Overall Stats
            </summary>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="M:Dashboard.Services.FreshdeskService.AddMultipleTickets">
            <summary>
            Add batch tickets
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Services.Interfaces.IAuthService">
            <summary>
            Interface for authentication-related services.
            </summary>
        </member>
        <member name="M:Dashboard.Services.Interfaces.IAuthService.Login(System.String,System.String)">
            <summary>
            Authenticates the user with the given username and password. 
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.Interfaces.IAuthService.SignUp(RealTimeComTest.Models.ViewModels.Request.RequestUser,System.String)">
            <summary>
            Registers a new user with the given credentials and role.
            </summary>
            <param name="requestUser"></param>
            <param name="role"></param>
        </member>
        <member name="M:Dashboard.Services.Interfaces.IAuthService.LogOut(System.String)">
            <summary>
            Logs the user out by invalidating the given token.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.Interfaces.IAuthService.RefreshToken(System.String)">
            <summary>
            Refreshes the authentication token.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Services.Interfaces.IFreshdeskService">
            <summary>
            Freshdesk Service interface
            </summary>
        </member>
        <member name="M:Dashboard.Services.Interfaces.IFreshdeskService.GetAllTickets(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Get All Tickets with pagination
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="orderBy"></param>
            <param name="orderType"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.Interfaces.IFreshdeskService.GetTicketsByQuery(System.String)">
            <summary>
            Get Tickets By Query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.Interfaces.IFreshdeskService.GetTicketById(System.Int32)">
            <summary>
            Get ticket by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.Interfaces.IFreshdeskService.GetOverallStats">
            <summary>
            Get stats of overall tokens
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.Interfaces.IFreshdeskService.AddMultipleTickets">
            <summary>
            Batch Post Ticket
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Services.Interfaces.IInventoryService">
            <summary>
            Inventory Service interface
            </summary>
        </member>
        <member name="M:Dashboard.Services.Interfaces.IInventoryService.GetInventoryByPagination(System.Int32,System.Int32,System.String)">
            <summary>
            Get Inventory By Pagination
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterKey"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.Interfaces.IInventoryService.AddInventoryByProductId(System.Int32,System.Int32,System.String)">
            <summary>
            Add Inventory By Product Id
            </summary>
            <param name="productId"></param>
            <param name="stockRequire"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Services.Interfaces.IOrderService">
            <summary>
            Order Service Interface
            </summary>
        </member>
        <member name="M:Dashboard.Services.Interfaces.IOrderService.PlaceOrder(System.Collections.Generic.List{Dashboard.Models.DTOs.Request.RequestOrderItem})">
            <summary>
            Place new Order
            </summary>
            <param name="orderItems"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.Interfaces.IOrderService.LiveOrders(System.String)">
            <summary>
            Get Live Orders
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:Dashboard.Services.Interfaces.IRevenueService">
            <summary>
            Interface for revenue service
            </summary>
        </member>
        <member name="M:Dashboard.Services.Interfaces.IRevenueService.GetProductCostById(System.Int32)">
            <summary>
            Get Product by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.Interfaces.IRevenueService.GetProductCostByName(System.String)">
            <summary>
            Get Product by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.Interfaces.IRevenueService.GetAllSearchValuesByPagination(System.Int32,System.Int32)">
            <summary>
            Get all search values
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.Interfaces.IRevenueService.GetRevenueStatsBasedOnDays(System.String)">
            <summary>
            get revenue stats
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Services.Interfaces.ISalesService">
            <summary>
            Sales Service
            </summary>
        </member>
        <member name="M:Dashboard.Services.Interfaces.ISalesService.GetSalesStatsByCategoryBasedOnDays(System.String)">
            <summary>
            Get Sales Stats By Category Based On Days
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.Interfaces.ISalesService.GetOverallSalesStatsBasedOnDays(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Overall Sales Stats Based On Days
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.Interfaces.ISalesService.GetTopSellingProductsByPagination(System.Int32,System.Int32)">
            <summary>
            Get Top Selling Products By Pagination
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.Interfaces.ISalesService.GetTopSellingCategoriesByPagination(System.Int32,System.Int32)">
            <summary>
            Get Top Selling Categories By Pagination
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.Interfaces.ISalesService.GetLast10MinSales">
            <summary>
            Get Last 10min Sales
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Services.InventoryService">
            <summary>
            Inventory Service
            </summary>
            <param name="userRepository"></param>
            <param name="alertRepository"></param>
            <param name="mqttService"></param>
            <param name="productRepository"></param>
        </member>
        <member name="M:Dashboard.Services.InventoryService.#ctor(Dashboard.Repository.Interfaces.IUserRepository,Dashboard.Repository.Interfaces.IAlertRepository,Dashboard.Services.MqttService,Dashboard.Repository.Interfaces.IProductRepository)">
            <summary>
            Inventory Service
            </summary>
            <param name="userRepository"></param>
            <param name="alertRepository"></param>
            <param name="mqttService"></param>
            <param name="productRepository"></param>
        </member>
        <member name="M:Dashboard.Services.InventoryService.GetInventoryByPagination(System.Int32,System.Int32,System.String)">
            <summary>
            Get Inventory By Pagination
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterKey"></param>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="M:Dashboard.Services.InventoryService.AddInventoryByProductId(System.Int32,System.Int32,System.String)">
            <summary>
            Add Inventory By Product Id
            </summary>
            <param name="productId"></param>
            <param name="stockRequire"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Services.MqttService">
            <summary>
            Mqtt Service
            </summary>
        </member>
        <member name="M:Dashboard.Services.MqttService.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            mqtt service constructor
            </summary>
        </member>
        <member name="M:Dashboard.Services.MqttService.ConnectAsync">
            <summary>
            Connect async with admin
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.MqttService.SubscribeAsync(System.String)">
            <summary>
            sub
            </summary>
            <param name="topic"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.MqttService.PublishAsync(System.String,System.String)">
            <summary>
            pub
            </summary>
            <param name="topic"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Services.OrderService">
            <summary>
            Order Service
            </summary>
        </member>
        <member name="M:Dashboard.Services.OrderService.#ctor(Dashboard.Services.MqttService,Dashboard.Repository.Interfaces.IOrderRepository,Dashboard.Repository.Interfaces.IAlertRepository,Hangfire.IBackgroundJobClient,Dashboard.Repository.Interfaces.IProductRepository)">
            <summary>
            Order Service
            </summary>
        </member>
        <member name="M:Dashboard.Services.OrderService.PlaceOrder(System.Collections.Generic.List{Dashboard.Models.DTOs.Request.RequestOrderItem})">
            <summary>
            Place new Order
            </summary>
            <param name="orderItems"></param>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="M:Dashboard.Services.OrderService.LiveOrders(System.String)">
            <summary>
            Get Live Orders from Excel
            </summary>
        </member>
        <member name="T:Dashboard.Services.RevenueService">
            <summary>
            Revenue Service
            </summary>
            <param name="revenueRepository"></param>
            <param name="productRepository"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:Dashboard.Services.RevenueService.#ctor(Dashboard.Repository.Interfaces.IRevenueRepository,Dashboard.Repository.Interfaces.IProductRepository,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Revenue Service
            </summary>
            <param name="revenueRepository"></param>
            <param name="productRepository"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:Dashboard.Services.RevenueService.GetProductCostById(System.Int32)">
            <summary>
            Get Product by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.RevenueService.GetProductCostByName(System.String)">
            <summary>
            Get Product by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.RevenueService.GetAllSearchValuesByPagination(System.Int32,System.Int32)">
            <summary>
            Get Ordered Paginated response of customer search
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.RevenueService.GetRevenueStatsBasedOnDays(System.String)">
            <summary>
            Get Revenue Stats based on days
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Services.SalesService">
            <summary>
            Sales Service
            </summary>
        </member>
        <member name="M:Dashboard.Services.SalesService.#ctor(Dashboard.Repository.Interfaces.ISalesRepository,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Sales Service
            </summary>
        </member>
        <member name="M:Dashboard.Services.SalesService.GetSalesStatsByCategoryBasedOnDays(System.String)">
            <summary>
            Get Sales Stats By Category Based On Days
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.SalesService.GetOverallSalesStatsBasedOnDays(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Overall Sales Stats Based On Days
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.SalesService.GetTopSellingProductsByPagination(System.Int32,System.Int32)">
            <summary>
            Get Top Selling Products By Pagination
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="M:Dashboard.Services.SalesService.GetTopSellingCategoriesByPagination(System.Int32,System.Int32)">
            <summary>
            Get Top Selling Categories By Pagination
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="M:Dashboard.Services.SalesService.GetLast10MinSales">
            <summary>
            Get Last 10min Sales Data
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Services.SMTPService">
            <summary>
            Email Sender class for Papercut SMTP
            </summary>
        </member>
        <member name="M:Dashboard.Services.SMTPService.#ctor">
            <summary>
            Email sender constructor
            </summary>
        </member>
        <member name="M:Dashboard.Services.SMTPService.SendEmail(System.String,System.String,System.String,System.String)">
            <summary>
            Send Email message
            </summary>
        </member>
        <member name="M:Dashboard.Services.SMTPService.SendInventoryRequest(Dashboard.Models.Supplier,Dashboard.Models.Product,System.Int32,Dashboard.Models.User)">
            <summary>
            Request Supplier for stocks
            </summary>
            <param name="reciver"></param>
            <param name="product"></param>
            <param name="stockRequire"></param>
            <param name="user"></param>
        </member>
        <member name="T:Dashboard.Utility.CustomException">
            <summary>
            Custom Exception class
            </summary>
            <remarks>
            constructor for custom exception
            </remarks>
            <param name="message"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Dashboard.Utility.CustomException.#ctor(System.String,System.Int32)">
            <summary>
            Custom Exception class
            </summary>
            <remarks>
            constructor for custom exception
            </remarks>
            <param name="message"></param>
            <param name="statusCode"></param>
        </member>
        <member name="F:Dashboard.Utility.CustomException.StatusCode">
            <summary>
            Status Code
            </summary>
        </member>
        <member name="F:Dashboard.Utility.CustomException.ErrorMessage">
            <summary>
            Error Message
            </summary>
        </member>
        <member name="T:Dashboard.Utility.Jwt">
            <summary>
            Jwt class with primary constructor y
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Dashboard.Utility.Jwt.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Jwt class with primary constructor y
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Dashboard.Utility.Jwt.GenerateJwtToken(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Generate JWT token with claim idenetity 
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Utility.Jwt.ValidateJwtToken(System.String)">
            <summary>
            Validate and return token principal
            </summary>
            <param name="token"></param>
            <returns></returns>
            <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenException"></exception>
        </member>
        <member name="T:Dashboard.Utility.Logger">
            <summary>
            Logger Class
            </summary>
        </member>
        <member name="M:Dashboard.Utility.Logger.LogException(System.Exception)">
            <summary>
            Log Exception into LogFile
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:Dashboard.Utility.Validation.ValidationUtility">
            <summary>
            Validation class as utility
            </summary>
        </member>
        <member name="M:Dashboard.Utility.Validation.ValidationUtility.PageInfoValidator(System.Int32,System.Int32)">
            <summary>
            Validate Page Size and Page Number
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:RealTimeComTest.Models.ViewModels.Request.RequestUser">
            <summary>
            user request model
            </summary>
        </member>
        <member name="P:RealTimeComTest.Models.ViewModels.Request.RequestUser.Username">
            <summary>
            Username is required and has a limit between 2 to 100 characters.
            </summary>
        </member>
        <member name="P:RealTimeComTest.Models.ViewModels.Request.RequestUser.Password">
            <summary>
            Password is required and has a limit between 8 to 64 characters.
            </summary>
        </member>
        <member name="T:RealTimeComTest.Models.LoginResponse">
            <summary>
            Login Respose model for session token login response
            </summary>
        </member>
        <member name="P:RealTimeComTest.Models.LoginResponse.Username">
            <summary>
            Username is required and has limit between 2 to 300
            </summary>
        </member>
        <member name="P:RealTimeComTest.Models.LoginResponse.Role">
            <summary>
            Role of the User
            </summary>
        </member>
        <member name="P:RealTimeComTest.Models.LoginResponse.SessionToken">
            <summary>
            Session token
            </summary>
        </member>
        <member name="P:RealTimeComTest.Models.LoginResponse.TokenExpirationTime">
            <summary>
            Token Expiration Time
            </summary>
        </member>
    </members>
</doc>
